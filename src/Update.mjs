// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Model from "./Model.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function handleUserInput(key, isPressed) {
  switch (key) {
    case "ArrowDown" :
        Model.keys.arrowDown = isPressed;
        return ;
    case "ArrowUp" :
        Model.keys.arrowUp = isPressed;
        return ;
    default:
      return ;
  }
}

function updateState(state, action) {
  var match = state.keys;
  if (action !== 1) {
    if (action !== 0 || !match.arrowUp) {
      return state;
    } else {
      return {
              rightPlayerY: state.rightPlayerY - 5 | 0,
              keys: state.keys
            };
    }
  } else if (match.arrowDown) {
    return {
            rightPlayerY: state.rightPlayerY + 5 | 0,
            keys: state.keys
          };
  } else {
    return state;
  }
}

function tick(setState, oldTime, time, param) {
  var oldTime$1 = Belt_Option.getWithDefault(oldTime, 0);
  Belt_Option.getWithDefault(time, oldTime$1);
  requestAnimationFrame(function (time) {
        return tick(setState, time, oldTime$1, undefined);
      });
  var arrowUp = Model.keys.arrowUp;
  var arrowDown = Model.keys.arrowDown;
  if (arrowUp) {
    if (arrowDown || !arrowUp) {
      return Curry._1(setState, /* Nothing */3);
    } else {
      return Curry._1(setState, /* Up */0);
    }
  } else if (arrowDown) {
    return Curry._1(setState, /* Down */1);
  } else if (arrowUp) {
    return Curry._1(setState, /* Up */0);
  } else {
    return Curry._1(setState, /* Nothing */3);
  }
}

export {
  handleUserInput ,
  updateState ,
  tick ,
  
}
/* No side effect */
