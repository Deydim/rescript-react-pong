// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Client from "@apollo/client";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.mjs";
import * as ApolloClient__React_Hooks_UseSubscription from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.mjs";

var Raw = {};

var query = Client.gql(["query   {\nhello(name: \"OK\")  \n}\n"]);

function parse(value) {
  var value$1 = value.hello;
  return {
          hello: !(value$1 == null) ? value$1 : undefined
        };
}

function serialize(value) {
  var value$1 = value.hello;
  var hello = value$1 !== undefined ? value$1 : null;
  return {
          hello: hello
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var Inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var useLazy = include.useLazy;

var MyQuery_refetchQueryDescription = include.refetchQueryDescription;

var MyQuery_use = include.use;

var MyQuery_useLazyWithVariables = include.useLazyWithVariables;

var MyQuery = {
  Inner: Inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: MyQuery_refetchQueryDescription,
  use: MyQuery_use,
  useLazy: useLazy,
  useLazyWithVariables: MyQuery_useLazyWithVariables
};

var Raw$1 = {};

var query$1 = Client.gql(["subscription   {\nsub_incremented  \n}\n"]);

function parse$1(value) {
  var value$1 = value.sub_incremented;
  return {
          sub_incremented: !(value$1 == null) ? value$1 : undefined
        };
}

function serialize$1(value) {
  var value$1 = value.sub_incremented;
  var sub_incremented = value$1 !== undefined ? value$1 : null;
  return {
          sub_incremented: sub_incremented
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var MySub_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseSubscription.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var MySub_use = include$1.use;

var MySub = {
  MySub_inner: MySub_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1,
  use: MySub_use
};

function TestQuery(Props) {
  var match = Curry.app(useLazy, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var result = match[1];
  var execute = match[0];
  var onClick = function (param) {
    return Curry._3(execute, undefined, undefined, undefined);
  };
  if (result.TAG === /* Executed */0) {
    if (result._0.data !== undefined) {
      console.log("some data");
    }
    
  }
  return React.createElement("button", {
              onClick: onClick
            }, "Query me");
}

var make = TestQuery;

export {
  MyQuery ,
  MySub ,
  make ,
  
}
/* query Not a pure module */
